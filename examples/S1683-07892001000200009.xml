<?xml version="1.0" encoding="ISO-8859-1"?><article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<front>
<journal-meta>
<journal-id>1683-0789</journal-id>
<journal-title><![CDATA[Acta Nova]]></journal-title>
<abbrev-journal-title><![CDATA[RevActaNova.]]></abbrev-journal-title>
<issn>1683-0789</issn>
<publisher>
<publisher-name><![CDATA[Universidad Católica Boliviana]]></publisher-name>
</publisher>
</journal-meta>
<article-meta>
<article-id>S1683-07892001000200009</article-id>
<title-group>
<article-title xml:lang="es"><![CDATA[Tendencias de la Industria de Desarrollo de Software]]></article-title>
</title-group>
<contrib-group>
<contrib contrib-type="author">
<name>
<surname><![CDATA[Peredo Mercado]]></surname>
<given-names><![CDATA[Marcos Javier]]></given-names>
</name>
</contrib>
</contrib-group>
<aff id="A01">
<institution><![CDATA[,COMTECO  ]]></institution>
<addr-line><![CDATA[Cochabamba ]]></addr-line>
<country>Bolivia</country>
</aff>
<pub-date pub-type="pub">
<day>00</day>
<month>00</month>
<year>2001</year>
</pub-date>
<pub-date pub-type="epub">
<day>00</day>
<month>00</month>
<year>2001</year>
</pub-date>
<volume>1</volume>
<numero>2</numero>
<fpage>217</fpage>
<lpage>221</lpage>
<copyright-statement/>
<copyright-year/>
<self-uri xlink:href="http://www.scielo.org.bo/scielo.php?script=sci_arttext&amp;pid=S1683-07892001000200009&amp;lng=en&amp;nrm=iso"></self-uri><self-uri xlink:href="http://www.scielo.org.bo/scielo.php?script=sci_abstract&amp;pid=S1683-07892001000200009&amp;lng=en&amp;nrm=iso"></self-uri><self-uri xlink:href="http://www.scielo.org.bo/scielo.php?script=sci_pdf&amp;pid=S1683-07892001000200009&amp;lng=en&amp;nrm=iso"></self-uri></article-meta>
</front><body><![CDATA[ <p align="center"><font size="4" face="Verdana, Arial, Helvetica, sans-serif"><B>Tendencias de la Industria de Desarrollo de Software</B></font></p>      <p align="center"><font size="4" face="Verdana, Arial, Helvetica, sans-serif">Marcos Javier Peredo Mercado</font></p>      <p align=center>COMTECO</p>      <p align=center>Cochabamba, Bolivia</p>      <p align=center>e-mail: <u><a href="mailto:marcos.peredo@ucbcba.edu.bo">marcos.peredo@ucbcba.edu.bo</a></u></p>  <br clear=all>         <p><b>Situación actual</b></p>      <p>La industria del desarrollo del software se encuentra muy adelantada comparándola con su estado hace unos pocos años. Los métodos de desarrollo de software lian ma­durado y contemplan todo el proceso de de­sarrollo y mantenimiento. Las herramientas CASE son cada vez más poderosas y per­miten analizar, diseñar, generar, probar y mantener los productos de software de una manera integrada y controlada. El World Wide Web se ha popularizado tanto en los últimos cinco años que se ha convertido en la interfaz de usuario de facto para los pro­ductos de software y ha obligado al uso de tecnologías nuevas. Las bases de datos son cada vez más sofisticadas y soportan des­de un usuario en computadoras de bolsillo a miles de usuarios en mainframes. Poco a poco, el desarrollo hecho a medida se va abandonando y los negocios compran pro­ductos de software muy probados, genéricos y con una buena base instalada de clientes.</p>      <p><b>¿Cómo hemos llegado hasta aquí?</b></p>      <p>El estado actual del desarrollo del soft­ware ha sido alcanzado después de cuatro décadas de trabajo en las siguientes áreas:</p>      <p>•&nbsp;&nbsp;&nbsp; Lenguajes de programación</p>      ]]></body>
<body><![CDATA[<p>•&nbsp;&nbsp;&nbsp; Interfaz de usuario</p>      <p>•&nbsp;&nbsp;&nbsp; Entornos de programación</p>      <p>•&nbsp;&nbsp;&nbsp; Software de base</p>      <p>•&nbsp;&nbsp;&nbsp; Visión del desarrollo</p>      <p>•&nbsp;&nbsp;&nbsp; Ingeniería de software</p>      <p>•&nbsp;&nbsp;&nbsp; Métodos de análisis y diseño</p>      <p>•&nbsp;&nbsp;&nbsp; Equipos de desarrollo</p>      <p><b>Evolución de los lenguajes de programación. </b>Los lenguajes han evolucionado mucho desde los   primeros lenguajes procedimentales como Basic, C, Fortran, RPG, Cobol y Pascal,   pasando por los lenguajes orientados a las bases de datos (Xba-se, SQL, 4GL),   los lenguajes orientados a objeto (Ada, Smalltalk, C++, Modula) y terminando en un lenguaje estándar orientado a objeto como Java.</p>     <p><b>Evolución de la interfaz de usuario. </b>En un principio, la interfaz de usuario era muy rudimentaria al ser impresa en papel. Recién en los años 80, empezaron a utilizarse monitores, lo que permitió tener mayor facilidad en la navegación por los datos de la pantalla. Desde principios de los años 90 aparecen los sistemas de ventanas con objetos gráficos que realizan funciones dis­paradas por eventos del teclado y de otros dispositivos como el ratón.</p>      <p><b>Evolución de los entornos de programación. </b>En un principio los compi­ladores, depuradores y editores no estaban integrados, haciendo la tarea de programación muy morosa. Poco a poco, el editor, compilador y depurador fueron integrados en el mismo entorno. Actualmente estos entornos integrados cuentan con ayuda inte­ractiva y en línea, editores inteligentes sensibles al contexto y control multiusuario de versiones. </p>     ]]></body>
<body><![CDATA[<p><b>Software de base. </b>Los sistemas operativos actuales soportan desde computación en casa hasta redes corporativas de computadoras con procesamiento paralelo. Las bases de datos se pueden escalar desde un usuario hasta miles de usuarios y manejar datos hasta el orden de los terabytes. Las aplicaciones de oficina han evolucionado hasta quedar completamente integradas.</p>      <p><b>Evolución en la visión del desarrollo. </b>Se comenzó con centros de cómputo en cada empresa que desarrollaba su soft­ware a medida; sin embargo, esto obligó a tener un ejército de profesionales trabajando en el mantenimiento de estas aplicaciones. Las empresas cambiaron su enfoque y comenzaron a buscar software genérico bien probado y desarrollado por empresas especializadas. Aquí la industria del software empezó a desarrollarse brindando sistemas genéricos para su comercialización. Por otro lado, las empresas contratan el desarrollo de sus sistemas a medida con empresas de software (out-sourcing) para evitar los problemas del desarrollo en casa. Actualmente las empresas de software comercializan el servicio completo de sistemas (software, hardware y operación) a cambio de un precio por transacción.</p>      <p><b>Evolución en la ingeniería de soft­ware. </b>Los entornos de ingeniería de software comenzaron con la generación de aplicaciones; luego, evolucionaron para dar soporte al análisis y diseño y posteriormente integraron ambas. En los entornos de inge­niería de software actuales se han integrado el manejo de requerimientos, análisis, diseño, generación, pruebas y manejo de cambios para dar soporte a todas las etapas del proceso de desarrollo de software. </p>      <p><b>Evolución en los métodos de análisis y diseño. </b>Ha habido una evolución larga en los métodos de desarrollo. Primero los métodos se centraron sólo en el análisis y luego sólo en el diseño, pa­ra posteriormente integrarse. Actualmen­te se contemplan también la construcción, pruebas e implementación. Se han utilizado cuatro enfoques principales a través de los años: las funciones, los datos, transformaciones matemáticas y los objetos. Los métodos funcionales y de datos han sido muy populares especialmente para sistemas de información, p.e.: ISAC (Lundeberg), Structured Analysis &amp; Design (Yourdon), Information Engineering (Martin), Jackson System Development (Jackson), NIAM (Nijssen) y System Development Methodology (Turner). Las transformaciones matemáticas han sido utilizadas para aplica­ciones de software de tiempo real y misión crítica, p.e.: Z (Spivey) y Cleanroom (Mills). Desde hace unos diez años se han impuesto los métodos orientados a objeto, p.e.: Object Modeling Technique (Ram-baugh), Object Oriented Design (Booch), Object Oriented Software Engineering (Ja-cobson) y Rational Unified Process (Booch, Jacobson, Rambaugh).</p>      <p><b>Evolución en los equipos de desa­rrollo. </b>De los equipos de programadores dedicados al diseño, codificación y pruebas se pasó a equipos con especializaciones: analistas, diseñadores, programadores, probadores. Poco a poco se evolucionó hasta los equipos que usan &quot;marcos de trabajo de mejoramiento continuo&quot; bajo modelos de calidad para el proceso y el producto de software. Los estándares más conocidos son CMM-SW (Software Capability Maturity Model) e ISO 9000-3. Actualmente existen muchos centros de desarrollo de software certificados con ISO 9000 y/o<br clear=all> </p>    <p align="center"><img src="/img/revistas/ran/v1n2/1-Peredo.JPG" width="779" height="494"></p>     <p align="center"><b>Figura 1:</b> Modelo de   Madurez de la Capacidad (Software Engineering Institute, Carniege Mellon   University).</p> <br clear=all>         <p>CMM que han conseguido la optimización de sus procesos industriales de software.</p>        <p><font size="3" face="Verdana, Arial, Helvetica, sans-serif"><B>Metas futuras (&iquest;o alcanzadas?) </B></font></p>      <p>La industria del software debe ser competitiva en estos tiempos de globalización y para ello debe alcanzar las siguientes metas:</p>     ]]></body>
<body><![CDATA[<p><b>Mayor productividad. </b>Mediante herramientas de programaci&oacute;n con soporte de asistentes y componentes de software reusables, como MS Visual Studio y Oracle Portal. </p>     <p><b>Interoperabilidad. </b>Las aplicaciones de   diversas empresas deben operar entre s&iacute;. Para ello se han desarrollado   est&aacute;ndares como CORBA y DCOM+.</p>     <p><b>Interfaz de usuario única. </b>El futuro tiene computadoras personales, agendas electrónicas, teléfonos móviles y televisores conectados a Internet usando páginas Web como interfaz de usuario.</p>      <p><b>Lenguajes</b><b> </b><b>de</b><b>  </b><b>programación</b><b> estándar. </b>Java como el lenguaje estándar de programación de todo propósito y XML como el lenguaje estándar para interfaces de usuario.</p>      <p><b>Métodos de desarrollo orientados a objeto afianzados. </b>Al ser Java un lenguaje estándar orientado a objeto y UML el lenguaje estándar de los diagramas orientados a objeto, se puede afirmar que los métodos de desarrollo orientados a objeto como Rational Unified Process se han afianzado.</p>      <p><b>Software eficiente, usable y mantenible.    </b>Se imponen &quot;marcos de trabajo de</p>      <p align="center"><img src="/img/revistas/ran/v1n2/2-Peredo.JPG" width="721" height="482"></p>      <p align="center"><b>Tabla 1: </b>Estimación de empleos de computación y matemáticas en <b>USA </b>1999.</p>      <p>mejoramiento continuo&quot;. CMM e ISO 9000 son los estándares que los negocios exigen que la industria del software cumpla.</p>      <p><b>Herramientas de ingeniería de soft</b><b>ware integradas. </b>Las herramientas integradas de programación, control de versiones, manejo de la configuración, modelamiento y manejo del proceso de software ya son una realidad, teniendo como ejemplos al conjunto de herramientas integradas por Rational Unified Process, Requisite Pro, Rational Rose, SoDA, Clear CASE, Test Studio y Clear Quest.</p>      ]]></body>
<body><![CDATA[<p><b>El futuro del desarrollo de software </b>El desarrollo de software será simplificado en el futuro por el uso de herramientas más poderosas de programación integradas a otras herramientas de software que soporten las demás actividades.</p>  Las actividades del proceso del software ser&aacute;n guiadas por &quot;marcos de trabajo&quot;, basados en el mejoramiento continuo que engloban   diferentes m&eacute;todos especializados en cada actividad.<br clear=all>       <p>El desarrollo de software se centrará en organizaciones especializadas en desarrollo de software con certificaciones ISO 9000, CMM o equivalentes.</p>      <p>Los sistemas heredados basados en viejas tecnologías deben ser integrados a los nue­vos sistemas y una especialización requerida será la del integrador de sistemas. En cam­bio, cada vez menos desarrolladores de soft­ware serán necesarios, dando lugar a más especialistas en administración de sistemas. Esto se puede comprobar en la tabla 1 y la tabla 2, donde el 34% de los empleos de computación están en la industria del soft­ware y el 66% está empleado en otros tipos de industrias según datos de la oficina fede­ral de empleo de USA.</p>     <p align="center"><img src="/img/revistas/ran/v1n2/3-Peredo.JPG" width="728" height="434"></p>     <p align="center"><b>Tabla 2:</b>   Estimación de empleos de   computación y matemáticas en 1999 en USA en   la industria del software solamente.</p>     <p><font size="3" face="Verdana, Arial, Helvetica, sans-serif"><B>¿Cómo nos afecta en el con­texto nacional?</B></font></p>      <p>Muchos productos de la tecnología de punta que se mencionan en este artículo han bajado sus precios en los últimos años, de manera que ya es accesible para el desarrollo de software para todo tipo de presupuestos.</p>      <p>Es una necesidad mejorar la educación superior sobre &quot;marcos de trabajo de mejoramiento continuo&quot; ya que tienen un mayor espectro que los métodos de desarrollo tra­dicionales, debido a su enfoque en el proceso y el producto de software.</p>      <p>Por otra parte, hay cada vez más espacio para profesionales especializados en la administración de sistemas y se reduce el espacio para profesionales de desarrollo de software. Es por eso que la educación debería bifurcarse en dos especialidades principales: el desarrollo de software y la administración de sistemas de software</p>      <p>Finalmente, aunque los &quot;centros de desarrollo de software certificados&quot; están todavía lejanos a nuestra realidad, deberíamos empezar ahora con el proceso de certificación en organizaciones de desarrollo de software para tener un mercado asegurado en el futuro.</p>      ]]></body>
<body><![CDATA[ ]]></body>
</article>
