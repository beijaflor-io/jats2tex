{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}

module Text.JaTexSpec where

import Data.ByteString (ByteString)
import Data.Monoid
import Data.String.Here
import qualified Data.Text as Text

import Test.Hspec

import Text.JaTex
import Text.JaTex.Template.Types
import Text.JaTex.TexWriter

testInputOutput
  :: String
     -> ByteString -> Text.Text -> IO ()
testInputOutput inputXml inputTemplate expectedOutput = do
  doc <- parseJATS inputXml
  templ <- parseTemplate "<noname>" inputTemplate
  output <-
    jatsXmlToLaTeXText
      def {joInputDocument = doc, joTemplate = (templ, "<noname>")}
  output `shouldBe` expectedOutput

spec :: Spec
spec = do
  describe "readJats" $ do
    it "works" $ do
      let inputXml = [here|
<strong>Hello</strong>
|]
          inputTemplate = [here|
strong: "\\textbf{@@children}"
|]
          expectedOutput = "% Generated by jats2tex@0.11.1.0\n\\textbf{Hello}\n"
      testInputOutput inputXml inputTemplate expectedOutput

    it "handles nested XPaths" $ do
      let inputXml = [here|
<sec>
  <p>Something</p>
  <other><p>Hidden</p></other>
</sec>
          |]
          inputTemplate = [here|
sec: |
    @@lua(return find("/p"))@@
          |]
          expectedOutput = "% Generated by jats2tex@0.11.1.0\nSomething\n"
      testInputOutput inputXml inputTemplate expectedOutput

    it "applies templates recursively" $ do
      let inputXml = [here|
<sec>
  <p><b>Bold</b> not bold</p>
  <other><p>Hidden</p></other>
</sec>
          |]
          inputTemplate = [here|
sec: |
    @@lua(return find("/p"))@@
p: |
    \paragraph{@@children}
b: |
    \textbf{@@children}
          |]
          expectedOutput = "% Generated by jats2tex@0.11.1.0\n\\paragraph{\\textbf{Bold} not bold}\n"
      testInputOutput inputXml inputTemplate expectedOutput

    it "respects XML XPaths" $ do
      let inputXml = [here|
<article>
  <sec>
    <p><b>Bold</b> not bold</p>
    <other><p>Other paragraph</p></other>
  </sec>
  <p>Top-level paragraph</p>
</article>
          |]
          inputTemplate = [here|
article: "@@children"
sec: |
    @@lua(return find("/p"))@@
    % Stuff
    @@lua(return find("/other"))@@
p: ""
sec/p: |
    \secParagraph{@@children}
sec/other/p: |
    \otherParagraph{@@children}
article/p: |
    \paragraph{@@children}
b: |
    \textbf{@@children}
          |]
          expectedOutput = [here|
% Generated by jats2tex@0.11.1.0
\secParagraph{\textbf{Bold} not bold}

% Stuff

\otherParagraph{Other paragraph}
\paragraph{Top-level paragraph}
          |] <> "\n"
      testInputOutput inputXml inputTemplate expectedOutput

    it "should find template" $ do
      templ <- parseTemplate "<noname>" [here|
sec: "@@children"
|]
      trees <-
        parseJATS [here|
<sec>
  <p>Something</p>
</sec>
|]
      let doc = trees !! 0
          findTemplateResult = findTemplate templ doc
      case findTemplateResult of
        [] -> expectationFailure "got nothing"
        [(_, ct, t)] -> do
          templatePredicate t `shouldBe` "sec"
          templateSelector ct `shouldBe` "sec"
          templateContent ct `shouldBe` "@@children"
          templateHead ct `shouldBe` ""
